datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

enum CurrencyCode {
  AZN
  GBP
  USD
  UAH
  RUB
  TRY
  EUR
}

model CurrencyRate {
  id     Int          @id @default(autoincrement())
  from   CurrencyCode
  to     CurrencyCode
  result Float
  date   String

  @@map("currencyRates")
}

model User {
  id                          Int           @id @default(autoincrement())
  email                       String        @unique
  hash                        String
  firstName                   String
  lastName                    String
  avatar                      String
  createdAt                   DateTime
  updatedAt                   DateTime?
  hasPinProtection            Boolean
  pinHash                     String?
  incorrectPinAttemptsCounter Int?
  blockTime                   DateTime? // In case user entered invalid pinCode {n} times
  primaryCurrency             CurrencyCode
  accounts                    Account[]
  transactions                Transaction[]
  tasks                       Task[]

  @@map("users")
}

model UsersRefreshTokens {
  id        Int    @id @default(autoincrement())
  userId    Int
  tokenHash String

  @@map("usersRefreshTokens")
}

model Account {
  id           Int           @id @default(autoincrement())
  title        String
  currency     CurrencyCode
  primary      Boolean
  balance      Float
  skin         String
  createdAt    DateTime
  updatedAt    DateTime?
  userId       Int
  user         User          @relation(fields: [userId], references: [id])
  transactions Transaction[]

  @@map("accounts")
}

enum TransactionType {
  income
  expense
}

model Transaction {
  id                  Int             @id @default(autoincrement())
  title               String
  type                TransactionType
  amount              Float
  category            String
  transactionDateTime DateTime
  createdAt           DateTime
  updatedAt           DateTime?
  userId              Int
  user                User            @relation(fields: [userId], references: [id])
  accountId           Int
  account             Account         @relation(fields: [accountId], references: [id])

  @@map("transactions")
}

model Task {
  id          Int       @id @default(autoincrement())
  originalId  Int?
  userId      Int
  user        User      @relation(fields: [userId], references: [id])
  title       String
  isRecurring Boolean
  startDate   String
  endDate     String
  weekday     Int
  time        String
  doneAt      DateTime?
  createdAt   DateTime
  updatedAt   DateTime?

  @@map("tasks")
}
